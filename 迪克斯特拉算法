python:

graph = {} 
graph["start"] = {} ----------添加起点和起点的所有邻居
graph["start"]["a"]=6
graph["start"]["b"]=2
graph["a"]={} ------------添加其他节点和他们的邻居
graph["a"]["fin"]=1
graph["b"]={}
graph["b"]["a"]=3
graph["b"]["fin"]=5
graph["fin"]={}----------终点没有任何邻居


costs={} ------------创建节点开销散列表
costs["a"]=6
costs["b"]=2
costs["fin"]=float("inf") ---------将终点的开销设置为无穷大

parents={}-------------创建父节点散列表
parents["a"]="start"
parents["b"]="start"
parents["fin"]=None-------将终点的父节点设置为None

peocessed=[]-------创建一个数组用于存放已经处理过的节点

def find_lowest_cost_node(costs) -------------该函数用于“在未处理的节点中找到开销最小的节点”
    lowest_cost = float("inf")
    lowest_cost_node=None
for node in costs:
    if costs[node] < lowest_cost and node not in processed:
        lowest_cost = costs[node]
        lowest_cost_node = node
return lowest_cost_node

node = find_lowest_cost_node(costs)
    while node is not None:
        neighbors=graph[node] -----neighbors是一个数列表
        for n in neighbors.keys():-----------遍历所有邻居
            if costs[n] > costs[node] + neighbors[n]-----如果经当前节点前往该邻居更近
                costs[n] = costs[node] + neighbors[n]--------更新该邻居的开销
                parents[n]=node-----------同时将该邻居的父节点设置为当前节点
        processed.append(node)---------将当前节点标记为处理过
node = find_lowest_cost_node(costs)-----找出接下来要处理的节点,并循环
